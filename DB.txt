CREATE : 생성
   예) CREATE USER
        CREATE TABLE...

ALTER : 수정

DROP : 삭제


설치
SCOTT -> LOCK

ALTER USER SCOTT IDENTIFIED BY tiger ACCOUNT UNLOCK;

권한 관리하기

참고)
스키마 객체
   테이블 객체
   테이블 객체


1. 시스템 권한
- 시스템 권한 부여
   GRANT 권한, 권한2 ... TO 사용자명, ROLE,PUBLIC

   TO 사용자
   TO ROLE
   TO PUBLIC : 모든 사용자

- 시스템 권한 취소
   REVOKE 권한 FROM 사용자명/ROLE/PUBLIC WITH ADMIN OPTION;

   CREATE SESSION
   CREATE TABLE
   CREATE SEQUENCE
   CREATE VIEW
   CREATE SYNONYM

   - WITH ADMIN OPTION; - 권한 부여 관리자(사용자가 소유한 권한 부여)

2. 객체 권한이란?
    사용자별 권한 (테이블, 인덱스, 뷰, 시퀀스 ...)
    

    
- 객체 권한 부여
   GRANT 객체 권한, ... ON 스키마.객체(테이블, 뷰, 시퀀스, ...) TO 사용자명/ROLE/PUBLIC WITH GRANT OPTION;

   참고)
      스키마명(사용자명).테이블

      WITH GRANT OPTION - 객체 권한을 다른 사용자에게 부여할 수 있는 권한


   참고) mysql
      권한 부여 후
      FLUSH PRIVILEGES;
- 객체 권한 취소
   REVOKE 객체권한,... ON 스키마명(사용자명).객체명(테이블,뷰...) FROM 사용자명/ROLE/PUBLIC;

롤 관리

1. 사전정의된 롤
- CONNECT 롤
- RESOUSE 롤


2. 사용자 정의 롤
   CREATE ROLE ROLE 이름;
   GRANT 권한 TO ROLE 이름;
   GRANT ROLE 이름 TO 사용자;


- 롤 생성과 권한 포함
- 부여된 롤과 권한 확인
CREATE ROLE

- 부여된 롤 취소
REVOKE ROLE 명칭 FROM 사용자

- 롤 삭제

DROP ROLE ROLE 명칭;

CREATE : 생성
        예) CREATE USER : 사용자 생성

ALTER : 변경
        예) ALTER USER : 사용자 변경

DROP : 삭제
        예) DROP USER : 사용자 삭제
            DORP ROLE : ROLE 삭제

GRANT
   - 시스템 권한
        GRANT 시스템 권한, .... TO 사용자명;
                        + WITH ADMIN OPTION : 권한 부여 관리자

   - 객체 권한
        GRANT 객체 권한 ON 스키마명(사용자명).객체명 TO 사용자
                        + WITH GRANT OPTION : 권한 부여 관리자

REVOKE
   - 시스템 권한
        REVOKE 시스템 권한 FROM 사용자;

   - 객체 권한
        REVOKE 객체권한 ON 스키마명(사용자명).객체명 FROM 사용자;

SQL - Structured Query Language

Query 질의

SQL 이론적 : 에드가 커드 : 관계 대수 + 집합

데이터 관리 -> 데이터를 담을 공간(틀 - 테이블, 스키마)

SQL
   - DDL(Data Definition Language - 데이터 정의어)
        - 스키마의 구조를 정의하는 언어(테이블,인덱스,시퀀스,뷰,...)

   - DML(Data Manipulation Language - 데이터 조작어)
        - 데이터를 추가, 수정, 삭제, 조회
           - INSERT 문
           - UPDATE 문
           - DELETE 문
           - SELECT 문



테이블에 데이터 추가하기
SELECT : 조회
SELECT : 컬럼명, ....
1. 실습 테이블 생성하기
2. 테이블 삭제하기

테이블에 데이터를 추가하는 INSERT 문
1. INSERT 문 기본 사용법

    INSERT INTO 테이블명 (컬럼명1, 컬럼명2, ...) VALUES ('값1', '값2',...);

    숫자 -> '' 생략가능
    문자 -> '' 사용

        - 컬럼명은 생략가능 : 모든 항목 순서대로 추가하는 경우

2. 테이블에 NULL 데이터 입력하기
    NULL : 값이 없음

    " : NULL

    참고)
        mysql
            NULL : 값이 없음
            " : 빈 값


        주석
        -- 설명

3. 테이블에 날짜 데이터 입력하기
    연산사
        ==, 
        != (다르다)
            !=
            <>
            ^=


        TO_DATE(날짜, 날짜 형식)

        SYSDATE : 현재 날짜, 시간 상수

          참고)
             MySQL
                CURRENT_TIMESTAMP
                NOW()
        
        서브쿼리 : 

테이블에 있는 데이터 수정하기
1. UPDATE 문의 기본 사용법

        UPDATE 테이블명
          SET
            컬럼명1 = 변경할 값,
            컬럼명2 = 변경할 값,
            ...

        WHERE 조건식...

2. 데이터 전체 수정하기
   

3. 이전 상태로 돌리기
   ROLLBACK -> 되돌리기

   DML - INSERT, UPDATE, DELETE -> ROLLBACK 가능
   DDL - ROLLBACK 불가

   참고) COMMIT - 영구반영


4. 데이터 일부분 수정하기











테이블에 있는 데이터 삭제하기
1. DELETE 문의 기본 사용법
   DELETE FROM 테이블명 WHERE 조건식;

2. 일부 삭제

3. 전체 삭제

추가
INSERT INTO 테이블명 (컬럼명1, 컬럼명2, ...)
   VALUES (값1, 값2...);

수정
UPDATE 테이블명
   SET
      컬럼명1 = 값,
      컬럼명2 = 값,
      ...
   WHERE 조건식;

삭제
DELETE FROM 테이블명 WHERE 조건식;

트랜잭션 제어와 세션

1. 트랜잭션이란?
- 작업수행을 위해 나눌 수 없는 최소 수행 단위

-COMMIT 할때까지가 하나의 트랜잭션

예)
   주문 - 3개 상품
   3개 상품 정보 -> 쿼리 3번 추가
   주문서 정보 -> 쿼리 1번

2. 트랜잭션을 제어하는 명령어

3. COMMIT

[이전 세션이 먼저 만료되고 난 후 그 뒤에 실행(시험에 나옴)]
세션과 읽기 일관성의 의미
1. 세션이란?
   데이터베이스 연결 접속 
      - 세션간 독립성 유지


2. 읽기 일관성
3. LOCK
   - 이전 세션에서 동일한 레코드를 수정, 샂게
   - 다른 세션 Lock 
   - 이전 세션에서 COMMIT, ROLLBACK를 통해서 처리 완료되야 LOCK이 해제


데이터 정의어
- 객체를 생성, 변경, 삭제하는 데이터 정의어
- DDL(Data Definition Language)
   - 데이터의 일관성
   - 도메인 영역 제약조건(자료형)

   상품명  가격
   상품1   천원
   - 데이터 구조(★테이블★, 뷰, 시퀀스, 인덱스 ...)


   자료형
      문자 
         고정
            CHAR(길이) : 고정 길이
                  예) 5 - 5bytes
                     국가코드 - 2자리
                        KR
                        JP
                        CN
         가변
            VARCHAR2(길이)
               예) subject VARCHAR2(255)
                     - 입력한 데이터 크기로 변경
                     - 최대 255
                     - 한줄 텍스트
                     
            CLOB : Character Large OBject
               - 여러줄 텍스트

      숫자 
         NUMBER(전체자리수, 소수점 자리수)
         예) SALEPRICE NUMBER(10) : 10자리 정수
             DISCOUNT NUMBER(4,2) : 총 4자리, 2자리는 소수점 20.25


      
      참고)
         오라클 - VARCHAR2
         MySQL - VARCHAR
         MSSQL- NCHAR
         PostGreSQL
         SQLite


      날짜,시간 : DATE

- 유의점?
   DML -INSERT, UPDATE, DELETE -> 트랜잭션 수동 관리(COMMIT)
   DDL - 실행하자마자 COMMIT; -> 복구불가

      예)
         DML - DELETE : 복구 가능(ROLLBACK)

         DDL - TRUNCATE : 복구 불가

1. CREATE TABLE
      - 테이블 생성

      문법
      CREATE TABLE 테이블명 (
        컬럼명1 자료형 [제약조건],
        컬럼명2 자료형 [제약조건],
        ...

      );

      참고)
         테이블 -> 대문자로만 인식
               -> 영문(한글도 가능하지만 지양), 숫자,
                  특수문자($, #, _ )
               -> 숫자는 앞에 사용 불가
               -> 예약어 사용 불가


         컬럼명도 테이블과 같은 구조

(시험에 나옴)
2. ALTER TABLE : 테이블 정의 변경
   - 컬럼 추가 : ADD
      ALTER TABLE 테이블명 ADD 컬럼명 자료형 [제약조건]

   - 컬럼 변경
      1) 컬럼명 변경 : RENAME COLUMN
         ALTER TABLE 테이블명 RENAME COLUMN 기존 컬럼명 TO 새로운 컬럼명;
         - HP -> TEL

      2) 컬럼 정의 변경 : MODIFY
         ALTER TABLE 테이블명 MODIFY 컬럼명 자료형 [제약조건];

   - 컬럼 삭제 : DROP COLUMN
      ALTER TABLE 테이블명 DROP CLOUMN 삭제할 컬럼명;
         
      
3. TRUNCATE
   - DDL
   - 테이블 비우기(전체 삭제)
   - TRUNCATE TABEL 테이블명;



   참고)
      DDL은 실행되자마자 COMMIT -> 복구 불가능(ROLLBACK X)
      DML - DELETE : COMMIT 전이면 복구 가능(ROLLBACK)

4. RENAME : 테이블명 변경
   RENAME 기존 테이블명 TO 새로운 테이블명;

5. DROP TABLE : 테이블 삭제
   DROP TABLE 테이블명;


6. DESCRIBE 테이블명 : 테이블 정의 확인
   - DESC 테이블명;


회원정보 테이블(시험문제)


객체 종류

데이터 사전
- 데이터베이스를 구상하고 운영하는 데 필요한 모든 정보를 저장하는 특수한 테이블로 데이터베이스가 생성되는 시점에 자동으로 만들어짐

- DICTIONARY / 동의어 DICT

- SELECT * FROM DICT;

1. USER_ 접두어를 가진 데이터 사전

- 현재 오라클에 접속해 있는 사용자가 소유한 객체 정보가 보관되어 있음

USER_TABLES : 현재 사용자가 소유한 테이블

2. ALL_ 접두어를 가진 데이터 사전
- 오라클 데이터베이스에 접속해 있는 사용자가 소유한 객체 및 다른 사용자가 소유한 객체 중 사용이 허락되어 있는 객체 정보를 가지고 있음

ALL_TABLES : 다른 사용자가 소유한 테이블까지 포함

3. DBA_ 접두어를 가진 데이터 사전
- 데이터베이스 관리 권한을 가진 사용자만 조회할 수 있는 테이블로서 SCOTT 계정으로는 조회가 불가능

DBA_USERS

더 빠른 검색을 위한 인덱스

시험때 인덱스 조회
예)
(SELECT * FROM USER_INDEXES WHERE TABLE_NAME='EMP_IDX';)

1. 인덱스란?
   INDEX - 목차

   - 레코드의 컬럼 데이터의 물리적 위치 기록
      - 정렬 방향성

- Table Full Scan
   - 테이블 레코드 전체 검색 : 인덱스가 X

- Index Scan
   - 인덱스를 통한 검색

참고)
   클러스터 인덱스
      - 검색의 기준 인덱스
      - 기본키, 기본키가 없는 경우 UNIQUE 키, 

   보조 인덱스
      - 클러스터 인덱스 외의 인덱스
      - 보조 인덱스 -> 검색된 레코드 -> 클러스터 인덱스 

   

- USER_INDEXES : 사용자가 추가한 인덱스 정보
- USER_IND_COLUMNS : 추가한 인덱스의 컬럼 정보

2. 인덱스 생성
   CREATE INDEX 인덱스명 
      ON 테이블명 (컬럼명 ASC|DESC, 컬럼명2 ASC|DESC ...);


   참고)
      상품 목록을 최신순(regDt), 상품 분류(CATEGROY)별 조회
      CREATE INDEX inx_ 테이블명_....
         ON 테이블명 (REGDT DESC, CATEGROY)


참고)
   ASC : 오름차순 정렬(기본값 - 생략가능)
   DESC : 내림차순 정렬

3. 인덱스 삭제
   DROP INDEX 인덱스명;

테이블처럼 사용하는 뷰
1. 뷰란?
   가상의 테이블
      - SELECT 결과물 -> 가상의 테이블
      
2. 뷰의 사용 목적
- 편리성 : 복잡한 SELECT 구문의 결과를 가상의 테이블로 만들면 복잡성이 사라진다. 
- 보안성 : 

3. 뷰 생성
- 생성 / 수정
   CREATE VIEW 뷰이름 AS (SELECT 문 ...) // 생성
   CREATE OR REPLACE VIEW ...// 뷰가 정의 X -> 생성, 뷰가 정의 O -> 수정

   - 적절한 권한 부여
   - 시스템 권한 : CREATE VIEW 
   - 뷰의 정보
      USER_VIEWS / ALL_VIEWS

- 조회
   - 테이블 조회와 동일하게 사용
   - SELECT 

- 삭제 
   DROP VIEW 뷰이름;

4. 인라인 뷰를 사용한 TOP-N SQL문
- 인라인 뷰
   SELECT ... FROM (SELECT ....)

- ROWNUM

참고)
   별칭(Alias) - AS
            - AS "컬럼명"
            - AS는 생략 가능
            - "" 생략가능 / 띄어쓰기 시에는 생략 불가

            - 테이블에도 적용 가능
               AS는 사용 불가, 항상 생략

               참고)
                  MySQL
                     테이블명 AS 별칭

                  ORACLE
                     테이블명 별칭

규칙에 따라 순번을 생성하는 시퀀스
1. 시퀀스란?














제약조건
1. 데이터 형태와 범위를 정하는 CHECK

참고)
   LENGTH(컬럼명) : 글자의 갯수 (UTF-8 한글 1자 - 3바이트)
   LENGTHB(컬럼명) : 바이트 수

   MySQL
      - LENGTH(컬럼명) : 바이트 수
      - LENGTH_CHAR(컬럼명) : 글자수

2. 제약 조건 비활성화, 활성화

비활성화
   ALTER TABLE 테이블명 DISABLE CONSTRAINT 제약조건명;

활성화
   ALTER TABLE 테이블명 ENABLE CONSTRAINT 제약조건명;

3. 기본값
   DEFAULT SYSDATE 

SELECT 뭉의 기본 형식
- 조회 + WHERE

1. 실습용 테이블 살펴보기

2. 데이터를 조회하는 3가지 방법
- 셀렉션
- 프로젝션
- 조인

3. SELECT 문 문법
SELECT [ALL|DISTINCT]컬럼명, ... FROM 테이블명;
        * - 모든 컬럼명

ALL - 기본값 : 중복을 포함한 모든 레코드
DISTINCT - 중복을 제외한 레코드

4. 중복 데이터를 삭제하는 DISTINCT
- 컬럼 기준의 중복 제거
- 컬럼이 여러개 있는 경우 -> 조합한 경우가 중복되면 제거


5. 별칭 설정하기
   - 컬럼간 연산 가능
   - AS(Alias)
   - 컬럼, 테이블 가능(ORACLE X, MYSQL O)
   - 컬럼명 [AS] "별칭"
   - AS 생략 가능
   - "" 생략 가능 : 별칭안에 공백이 없는 경우만 / 공백이 있는 경우는 반드시 " "

   - 테이블도 별칭이 가능, 오라클에서는 AS 키워드 사용 X

6. 원하는 순서로 출력 데이터를 정렬하는  ORDER BY
- 오름차순(ASC), 내림차순(DESC)

SELECT 컬럼명 FROM 테이블명 ... ORDER BY 컬럼명 [ASC|DESC]
ASC - 기본값 : 생략 가능

ORDER BY 컬럼명1 [ASC|DESC], 컬럼명2 [ASC|DESC]...

1차 정렬 - 컬럼명1
2차 정렬 - 컬럼명1 값이 동일하면 컬럼명2

참고)
CREATE INDEX 인덱스명 ON 테이블명 (컬럼명 [ASC|DESC]);

CREATE INDEX idx_hiredate ON EMP (HIREDATE DESC)


6/30 평가 4~15장 /100% 연습문제에서 나옴 문제 20문항 시험시간 2시간

WHERE절과 연산자
1. 필요한 데이터만 출력하는 WHERE절
- 조건식 : 참 것짓을 판별하는 연산식 ( 비교연산자, 논리연산자)
      -> 참이되면 레코드 출력

2. 여러 개 조건식을 사용하는 AND,OR 연산자

논리 연산자
   AND : 조건이 모두 참 -> 참
   OR : 조건 중에서 하나라도 참 -> 참
   NOT : 참->거짓, 거짓->참
         : 조건식을 반대로 변경

3. 연산자 종류와 활용 방법 알아보기
1) 산술 연산자
   +, -, /, *

2) 비교 연산자
   >, <, >=, <=
   = : 같다

   다르다
   !=
   <>
   ^=

참고)
   DUAL : 더미 테이블(DUMMY)

   SELECT 10 + 20 FROM DUAL; - FROM DUAL : 생략불가 (오라클)
                             - MySQL : FROM DUAL 생략가능

   - 등가 비교 연산자

3) 논리 부정 연산자
4) IN 연산자 - 교집합

   참고)
      NOT IN : 포함되지 않은 조건 - 차집합

5) BETWEEN A AND B 연산자
   SAL >= 1000 AND SAL <= 2000

   SAL BETWEEN 1000 AND 2000;
   
6) LIKE 연산자와 와일드 카드
   - 포함 패턴으로 검색

   - 컬럼명 LIKE'검색어'; 컬럼명 = 검색어
   - 컬럼명 LIKE'검색어%'; 검색어로 시작하는 패턴
   - 컬럼명 LIKE'%검색어'; 검색어로 끝나는 패턴
   - 컬럼명 LIKE'%검색어%'; 검색어가 중간에 포함된 패턴

   - _ : 문자 한개
      - 첫번째 문자는 아무거나
      - 두번째 문자는 L이 나오는 패턴
         LIKE '_L%'


   - %, _는 특수한 기능이 동작 -> 문자 그대로 사용 가능?
      -> ESCAPE로 표시 -> 그냥 문자로 인식

7) IS NULL 연산자
   NULL : 값이 없음
        : 연산 불가 / 연산은 반드시 값이 존재해야 가능

   =, >, < 로 비교 연산 불가

   - 별도 연산자를 통해서 NULL인 컬럼을 조회
   IS NULL : NULL인지 체크
   IS NOT NULL : NULL이 아닌 값 체크

   참고) IS : ~인지 아닌지

   NULL을 처리하는 함수
      - NVL(NULL 포함된 컬럼명, 기본값)
      - NVL2(NULL 포함된 컬럼명, 값이 있는 경우 대체 값, 값이 없을때 대체 값)

      참고)
         빈값 '':
            - 오라클 : NULL로 판단
            - MySQL : 빈 값으로 판단(NULL이 아니다)
8) 집합 연산자
   - 집합 이론 + 관계 대수

   집합의 가장 중요한 특징?
   A - 1,2,3,4
   B - 3,4,5,6
   A와 B의 합집합 - 1,2,3,4,5,6
      - 중복이 없다
      - 순서 유지 X

   UNION : 합집합
      - 중복 X
      
      UNION ALL : 중복을 허용

   INTERSECT : 교집합 - 공통 레코드
   MINUS : 차집합 - 공통 레코드 제거

   차이점)
      MySQL : INTERSECT, MINUS는 존재 X -> IN, NOT IN을 적절하게 활용해서 대체

데이터 처리와 가공을 위한 오라클 함수
- 내장함수 종류
1) 단일행 함수
   - 행 하나의 데이터 적용

2) 다중행 함수
   - 행 여러개의 결과 -> 적용
   예) 합계, 평균
      SAL의 합계

단일행 함수
   문자, 숫자, 날짜

문자함수

1. UPPER, LOWER, INITCAP

   UPPER : 소문자 -> 대문자
   LOWER : 대문자 -> 소문자
   INITCAP : 첫글자만 대문자, 나머지는 소문자

2. LENGTH
   - 문자 길이(문자의 실제 갯수)



   참고)
      CHECK(LENGTH(LOGIN_PWD) > 3)

      LENGTHB - 문자의 바이트 수
              - 알파벳 1개 - 1바이트, UTF-8 기준 한글 1한

      MySQL - LENGTH - 문자의 바이트 수
            - LENGTH_CHAR - 문자의 실제 갯수


3. SUBSTR(통합 시험에 나옴)
   - 문자열 일부를 추출할 때
   - SUBSTR(컬럼명, 시작 위치, 추출 길이); // 시작위치는 1부터 시작
      SUBSTR(JOB,1,2) : JOB 컬럼에서 첫번째 부터 2차 시작

   - SUBSTR(컬럼명, 시작위치); // 시작위치에서 끝까지

   시작위치 -1부터 시작 좌 -> 우 : 양수
            - 음수 : 예) -1 : 우측 끝 글자 : 이동방향 우 -> 좌
   
4. INSTR
      - 문자의 위치(1부터 시작)
      - 문자가 없으면 0을 반환
      - 1 이상을 반환 -> 문자가 존재 : LIKE 포함(LIKE '%키워드%') 조건을 대체

   참고)
      자바스크립트, 자바 -> String
                              indexOf : 문자열의 위치(0부터 시작)
                                        문자열이 없으면 -1을 반환

5. REPLACE
   문자 교체

   REPLACE(문자열, 찾는 문자열, 변경할 문자)


6. LPAD, RPAD

   LPAD : 왼쪽으로 부족한 문자열 채우기
   RPAD : 오른쪽으로 부족한 문자열 채우기

   LPAD(문자열, 자리수, 자리수가 남는 경우 채워줄 문자)

   10 -> 0010
   100 -> 0100

7. CONCAT
   - 문자열 결합
   직원명: 직책
      CONCAT(CONCAT(ENAME, ':'), JOB)

      참고) MySQL : CONCAT(ENAME,':',JOB)

   - || 연산자 : 문자열 결합
        문자열 || 문자열 || 문자열

8. TRIM, LTRIM, RTRIM
   - 공백 제거

   - TRIM : 양쪽 공백 제거
            - 왼쪽, 오른쪽 여백을 지정해서 제거
            - 특정 문자열 제거
            TRIM(방향 '제거할 문자열' FROM 문자열)

            방향 - LEADING : 왼쪽
                 - TRAILING : 오른쪽
                 - BOTH : 양쪽

   - LTRIM : 왼쪽 공백 제거
            - 특정 문자열 제거

   - RTRIM : 오른쪽 공백 제거
            - 특정 문자열 제거

숫자 함수
1. ROUND : 반올림
   ROUND(숫자, 반올림 위치 - 0)
      ROUND(1234.5678, 0)
         1234 자리까지 출력 -> 소수점 첫재 자리에서 반올림
         정수 -> 소수점 자리

         양수 : 소수점 자리
         음수 : 정수 자리
       1  2  3 4. 5 6 7 8
      -3 -2 -1 0  1 2 3 4

2. CEIL : 올림

3. FLOOR : 버림

4. TRUNC : 절사
   TRUNC(숫자, 절사 위치 - 기본 값 소수점 첫째 자리까지 제거 - 0)
      절사 위치 : 양수 - 소수점 자리
                 음수 - 정수 자리

5. MOD : 나머지 연산 
   MOD(숫자, 나누는 수)

   참고)
      자바, 자바스크립트 나머지 연산자 %


날짜 함수
1. 연산자
1) 날짜 데이터 + 숫자 : 숫자만큼 날짜 더하기
2) 날짜 데이터 - 숫자 : 숫자만큼 날짜 빼기
3) 날짜 데이터 - 날짜 데이터 : 간격 일수
4) 날짜 데이터 + 날짜 데이터 : 연산 불가


2. ADD_MONTHS
   - 몇 개월 더하기(양수) / 빼기(음수)
   ADD_MONTHS(날짜 데이터, 더하거나 뺄 개월수)

3. MONTHS_BETWEEN
   - 월 단위의 간격
   - MONTHS_BETWEEN(비교 날짜1, 비교 날짜2)

4. NEXT_DAY, LAST_DAY

   NEXT_DAY : 다음 요일
      NEXT_DAY(날짜, "요일 문자");

   LAST_DAY : 현재 달의 마지막 일
      LAST_DAY(날짜);


형 변환 함수
1. TO_CHAR : 형식화된 문자
   - 날짜
      Y - 연도 / YYYY - 4자리 연도 / YY - 2자리 연도
      R - 연도 / RRRR - 4자리 연도 / RR - 2자리 연도

      - 차이점 : 2자리
            YY : 현재 년도 기준 80 -> 2080
            RR : 가장 가까운 년도 기준 80 -> 1980
            MM : 월
            DD : 일

            HH : 시 - 24 / hh - 12 / HH12
            MI : 분
            SS : 초

   - 숫자
      999.99 -> 소수점을 2자리 까지 표기
      999,999 -> 3자리마다 ,를 추가

   TO_CHAR(숫자,'패턴');

2. TO_NUMBER
   형식화된 숫자 문자열 -> 숫자

   문자 + 숫자 - 문자숫자 결합

   - 암묵인 형변환 : 문자라고 하더라도 숫자로 충분히 판단 가능 -> 자동변경

   TO_NUMBER(형식화 숫자 문자열, 패턴) ->

3. TO_DATE
   - 형식화된 문자 -> 날짜
   TO_DATE(형식화된 날짜 문자, 형식) -> 날짜



TO_CHAR
   - 숫자 -> 형식화된 숫자 문자
      1000 -> 1,000
      TO_CHAR(1000, '9,999');

   - 날짜 -> 형식화된 날짜
      TO_CHAR(날짜, '패턴');

      YYYY / RRRR
         YY / RR -> YY : 현재 년도 기준, RR 가장 가까운 년도 기준
         MM - 월
         DD - 일

         HH24/HH12
         MI - 분
         SS - 초

TO_NUMBER
   형식화된 숫자 -> 숫자

TO_DATE
   형식화된 날짜 -> 날짜





----------------------------------------------------------------
NULL 처리 함수
- 값이 없음
- 연산 X (비교 방식으로 체크 불가 = 산술 연산도 불가)
- IS NULL : NULL 인지 체크
   참고) IS NOT NULL : NULL이 아닌지 체크

1. NVL
   NVL(컬럼명, 컬럼명이 NULL일때 대체 값)


2. NVL2
   NVL2(컬럼명, 컬럼명이 NULL이 아닐때 값, 컬럼명이 NULL일때 값);


선택문
1. DECODE 함수
   - 오라클에만 있는 함수

2. CASE 문
   - 표준 SQL에 있는 구문

   CASE 컬럼명
      WHEN '키워드' THEN 출력할 컬럼 또는 연산
      ...
      ELSE 키워드가 전부 매칭이 안될 경우 ...
   END

   CASE 
      WHEN 조건식1 THEN 조건식1이 참일때 출력 값
      WHEN 조건식2 THEN 조건식1 X, 조건식2 참 출력 값
      ...

   END 별칭
----------------------------------------------------------------

다중행 함수와 데이터 그룹화
- 하나의 열에 출력 결과를 담는 다중행 함수
- 여러 행의 결과 -> 하나의 행의 결과
- 통계 관련 함수

1. SUM : 합계

2. COUNT : 행의 갯수

3. MAX, MIN : 최대값, 최소값

4. AVG : 평균

- 연산에서 NULL은 제외

집계함수([ALL - 기본값|DISTINCT - 유일한 값] 컬럼명)


결과 값을 원하는 열로 묶어 출력하는 GROUP BY 절
- 특정 컬럼의 같은 값으로 묶어주는 구문
- 통계(집계) 함수와 함께 많이 사용

1. GROUP BY 절의 기본 사용법
SELECT ...
FROM 테이블명
WHERE 조건식
GROUP BY 그룹화할 컬럼명(여러개 지정)

ORDER BY...

2. GROUP BY 절을 사용할 때 유의점
    - 컬럼명은 반드시 GROUP BY에 사용된 컬럼명만 조회 가능

3. HAVING 절
   - 통계(집계) 함수는 WHERE 절에서 사용불가
   - 통계(집계) 함수의 조건식 HAVING 절에서 사용가능

1) 기본 사용법
2) 유의점
- WHERE절은 출력 대상 행을 제한하고, HAVING절은 그룹화된 대상을 출력에서 제한

그룹화 관련 함수
1. ROLLUP

2. CUBE

조인
- 여러 테이블을 하나의 테이블처럼 사용(같은 공통 값)
SELECT ... FROM 테이블명, 테이블명

테이블명.컬럼명

별칭
[AS] - 컬럼, 테이블(오라클 X)

조인종류
1. 등가 조인
   - 특정 컬럼의 값의 동일 여부
   - INNER JOIN

2. 비등가 조인
   - 암묵적인 조인
   - 값의 범위

3. 자체 조인
   - 같은 테이블내에서 조회

4. 외부 조인
   기준 테이블의 레코드는 다 나오고, 조인하는 다른 테이블은 공통 값이 있으면 함께 추가로 나온다

   왼쪽 외부 조인(Left Outer join) : WHERE 테이블1.컬럼명 = 테이블2.컬럼명(+)
   오른쪽 외부 조인(Right Outer Join) : WHERE 테이블1.컬럼명(+) = 테이블2.컬럼명

   양쪽 외부 조인(Full Outer Join) : 양쪽 테이블 데이터가 다 나오나, 추가정보가 있으면 함께 나온다.
                                 - (+) 는 정의 불가, SQL 표준 문법
                                 - Oracle, MSSQL 가능
                                 - MySQL 지원 X

SQL-99 표준 문법
1. NATUAL JOIN - 공통 컬럼 1개 일때
   - 두 테이블에서 컬럼명, 자료형이 같으면 알아서 조인
   - 등가조인

2. JOIN ~ USING - 공통 컬럼이 여러개여도 적용 가능
   - 등가조인(INNER JOIN, JOIN), 외부조인(LEFR [OUTER] JOIN, RIGHT [OUTER] JOIN)
   - FROM 테이블1 [INNER|LEFT [Outer]|RIGHT [Outer]] JOIN 테이블2 USING(공통 컬럼명)

3. JOIN ~ ON
   FROM 테이블1 [INNER|LEFT [Outer]|RIGHT [Outer]] JOIN 테이블2 ON 테이블1.컬럼명 = 테이블2.컬럼명;



   참고)
      boardDatas - idBoard : 외래키
      boards - id : 기본키

      기본키 주로 많이 사용되는 항목 : 대리키 (id, seq, idx...)
         - 외래키 명 테이블명_기본키, 기본키_테이블명

4. OUTER JOIN
   LEFT [OUTER] JOIN : 왼쪽 테이블이 전체, 오른쪽이 추가 정보 
   RIGHT [OUTER] JOIN : 오른쪽 테이블이 전체, 왼쪽 테이블이 추가 정보

   FULL OUTER JOIN : 양쪽 외부 조인, 양쪽 모두에서 추가 정보가 있으면 표기, 없으면 NULL

5. 세 개 이상의 테이블을 조인

SQL문 속 또 다른 SQL문, 서브 쿼리

1. 서브쿼리(부속질의)
   SELECT 문 안에 SELECT 문이 포함된 형태
      1) 스칼라 부속질의 : 스칼라 = 단일 값 / SELECT 결과가 단일값으로 나와야 하는 경우
            SELECT 컬럼명 - 단일값 ... FROM ... WHERE 조건식 - 비교 연산
            SAL > 단일값

      2) 인라인 뷰 : 가상의 뷰
         SELECT ... FROM (SELECT ....)

      3) 상관 부속질의
            부모쪽 테이블의 결과, 자식쪽 조건식에서 사용


2. 실행 결과가 하나인 단일행 서브 쿼리
   - 스칼라 부속질의

1) 단일행 서브쿼리와 날짜형 데이터
   - 30번 부서의 가장 최근 고용한 직원보다 이후에 고용된 직원
   SELECT * FROM EMP WHERE HIREDATE > (SELECT MAX(HIREDATE) FROM EMP WHERE DEPTNO =30);

2) 단일행 서브쿼리와 함수
   AVG(), MAX(), MIN(),COUNT(), SUM()...

   프로잭션 : 컬럼명
   비교연산자 : >, <, >=, <=, =, !=, <>, ^=

3. 실행 결과가 여러 개인 다중행 서브 쿼리
   - 다중행 연산자
   - IN : IN(값, 값2, 값3...) IN에 정의된 값에 일치하는 행이 조회(TRUE)
   - ANY, SOME : 어떤 값이라도 조건을 만족하면 행 조회(TRUE)
   - ALL : 모든 값이 조건을 만족하면 행 조회(TRUE)
   - EXISTS : 서브 쿼리 결과가 있으면 TRUE

- 실행 결과 행이 여러개로 나오는 서브쿼리
- 서브쿼리 결과가 여러개이므로 단일행 연산자는 사용할 수 없고 다중행

1) IN 연산자
   - 부서별(GROUP BY) 최고(MAX) 급여 직원
   - SELECT * FROM EMP WHERE SAL IN (SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO);

2) ANY, SOME 연산자
   - 30번 부서 사원의 최대 급여보다 적은 급여를 받는 직원
   - SELECT * FROM EMP WHERE SAL < ANY (SELECT SAL FROM EMP WHERE DEPTNO=30) ORDER BY EMPNO;
   - SELECT * FROM EMP WHERE SAL < (SELECT MIN(SAL) FROM EMP WHERE DEPTNO = 30) ORDER BY EMPNO;


3) ALL 연산자
   - 30번 부서 사원의 최소 급여보다 더 적은 급여를 받는 직원
   - SELECT * FROM EMP WHERE SAL < ALL (SELECT SAL FROM EMP WHERE DEPTNO = 30);
   - SELECT * FROM EMP WHERE SAL > (SELECT MAX(SAL) FROM EMP WHERE DEPTNO = 30);
   

4) EXISTS
    - 10번 부서 : 행이 조회 O
    - SELECT * FROM EMP WHERE EXISTS (SELECT * FROM DEPT WHERE DEPTNO=10);
    
    - 50번 부서 X : 행이 조회 X
    - SELECT * FROM EMP WHERE EXISTS (SELECT * FROM DEPT WHERE DEPTNO=50);

4. 비교할 열이 여러 개인 다중열 서브쿼리
   IN -> 항목 여러개 비교
      -> 부서번호, 최대 급여


5. FROM절에 사용하는 서브쿼리와 WITH절
1) WITH 절
2) 상호 연관 서브쿼리

6. SELECT 절에 사용하는 서브쿼리